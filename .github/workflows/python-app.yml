name: Python application

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install uv
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH

    - name: Create virtual environment and install dependencies
      run: |
        uv venv
        uv pip install -e ".[dev]"

    - name: Lint with ruff
      run: |
        uv run ruff check .

    - name: Format with black
      run: |
        uv run black .

    - name: Type check with mypy
      run: |
        uv run mypy --ignore-missing-imports src/ || true

    - name: Check version consistency
      run: |
        pip install tomli
        python scripts/check_version_consistency.py

    - name: Test with pytest
      run: |
        uv run pytest

  build-and-publish:
    needs: test
    if: false  # Disabled for now - Re-enable with: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Set up virtual environment and install build tools
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH
        uv venv
        uv pip install build twine

    - name: Build package
      run: |
        uv run python -m build

    - name: Publish to PyPI
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      env:
        TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
        TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
      run: |
        uv run twine upload dist/*
